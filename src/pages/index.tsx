import { client, getAllSps } from "@/client";
import CreateProfileModal from "@/components/create-profile/create-profile-modal";
import { Demo } from "@/components/demo";
import RegularTweetOverhead from "@/components/tweet/regular-tweet-overhead";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import ChangeGroupPolicy from "@/components/upload/change-group-policy";
import CreateAndUpload from "@/components/upload/create-and-upload";
import { Wallet } from "@/components/wallet";
import { useIsMounted } from "@/hooks/useIsMounted";
import { getGreenSocialContract } from "@/lib/get-contract";
import { GfSPListObjectsByBucketNameResponse } from "@bnb-chain/greenfield-js-sdk";

import { Inter } from "next/font/google";
import Head from "next/head";
import { useAccount, usePublicClient, useQuery } from "wagmi";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const isMounted = useIsMounted();
  //const {isConnected} = useAccount()

  const account = useAccount();

  const publicClient = usePublicClient({
    chainId: 5611,
  });

  const { data: postList } = useQuery(["bucket-list"], async () => {
    const sps = await getAllSps();

    const lol = sps[0];

    const list = await client.object.listObjects({
      bucketName: "virtual-insanity-qwe",
      endpoint: "https://gnfd-testnet-sp1.bnbchain.org",
    });

    const qwe = list.body
      .GfSpListObjectsByBucketNameResponse as GfSPListObjectsByBucketNameResponse;

    return qwe;
  });

  if (!isMounted) return null;

  return (
    <>
      <Head>
        <title>GreenSocial</title>
        <meta name="description" content="Generated by create Greenfield app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main
        className={` ${inter.className} pt-4 container flex flex-col gap-5 sm:w-[500px]`}
      >
        {account.isConnected && <CreateProfileModal />}
        {/**account.isConnected && <Demo />*/}
        {/**reorder postlist by creation date */}
        <Tabs defaultValue="all" className="w-full">
          <TabsList className="w-full">
            <TabsTrigger className="w-full" value="all">
              All
            </TabsTrigger>
            <TabsTrigger className="w-full" value="following">
              Following
            </TabsTrigger>
          </TabsList>
          <TabsContent value="all">
            {postList &&
              postList.Objects.sort(
                (a, b) => b.ObjectInfo.CreateAt - a.ObjectInfo.CreateAt
              ) &&
              postList.Objects.map((post) => {
                const greenSocial = getGreenSocialContract({
                  publicClient,
                });

                return (
                  <div id={post.CreateTxHash}>
                    <RegularTweetOverhead
                      object={post.ObjectInfo}
                      address={post.ObjectInfo.Creator as `0x${string}`}
                      createHash={post.CreateTxHash}
                    />
                  </div>
                );
              })}
          </TabsContent>
          <TabsContent value="following"></TabsContent>
        </Tabs>
      </main>
    </>
  );
}
